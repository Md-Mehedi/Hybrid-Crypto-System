# -*- coding: utf-8 -*-
"""BitVectorDemo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NoLVEBqkvrHwoYoEuxX0BeJvaJ5MtVrA
"""

"""Tables"""

import copy
from collections import deque

from BitVector import *

Sbox = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

InvSbox = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)

RCon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36]

Mixer = [
    [BitVector(hexstring="02"), BitVector(hexstring="03"), BitVector(hexstring="01"), BitVector(hexstring="01")],
    [BitVector(hexstring="01"), BitVector(hexstring="02"), BitVector(hexstring="03"), BitVector(hexstring="01")],
    [BitVector(hexstring="01"), BitVector(hexstring="01"), BitVector(hexstring="02"), BitVector(hexstring="03")],
    [BitVector(hexstring="03"), BitVector(hexstring="01"), BitVector(hexstring="01"), BitVector(hexstring="02")]
]

InvMixer = [
    [BitVector(hexstring="0E"), BitVector(hexstring="0B"), BitVector(hexstring="0D"), BitVector(hexstring="09")],
    [BitVector(hexstring="09"), BitVector(hexstring="0E"), BitVector(hexstring="0B"), BitVector(hexstring="0D")],
    [BitVector(hexstring="0D"), BitVector(hexstring="09"), BitVector(hexstring="0E"), BitVector(hexstring="0B")],
    [BitVector(hexstring="0B"), BitVector(hexstring="0D"), BitVector(hexstring="09"), BitVector(hexstring="0E")]
]

b = BitVector(hexstring="4E")
int_val = b.intValue()
s = Sbox[int_val]
s = BitVector(intVal=s, size=8)
# print(s.get_bitvector_in_hex())

AES_modulus = BitVector(bitstring='100011011')

bv1 = BitVector(textstring="A")
# print(bv1.get_bitvector_in_hex())
bv2 = BitVector(hexstring="63")
bv3 = bv1.gf_multiply_modular(bv2, AES_modulus, 8)
# print(bv3)







def print_bv_matrix(matrix):
  for row in matrix:
    for value in row:
      print(str.upper(value.get_bitvector_in_hex())," ", end="")
    print()
  print()

def print_bv_array(array):
  for value in array:
    print(str.upper(value.get_bitvector_in_hex())," ", end="")
  print()

def transpose(matrix):
  for i in range(len(matrix)):
    for j in range(i+1, len(matrix[i])):
      temp = matrix[i][j]
      matrix[i][j] = matrix[j][i]
      matrix[j][i] = temp

def array_xor(ara1, ara2):
  result = []
  for i in range(len(ara1)):
    result.append(ara1[i] ^ ara2[i])
  return result

def byte_substitute_from_sbox(ara):
  for i in range(len(ara)):
      ara[i] = BitVector(intVal=Sbox[ara[i].intValue()], size=8);


# def left_rotate(ara, n):
#     start = ara[n:]
#     end = ara[:n]
#     ara.clear()
#     for x in start:
#       ara.append(x)
#     for x in end:
#       ara.append(x)

# def xor(ara1, ara2):
#   print(len(ara1))
#   print(len(ara2))
#   if(len(ara1) != len(ara2)):
#     print("size mismatch. xor can't be applied")
#     return []
#   result = []
#   for i in range(len(ara1)):
#     result.append(ara1[i] ^ ara2[i])
#   return result



# def print2D(ara):
#   print("--- array is printing")
#   for a in ara:
#     temp = ""
#     for x in a:
#       temp += format(x, 'X') +", "
#     print(temp)

# def print1D(ara):
#   print("--- array is printing")
#   for x in ara:
#     print(format(x, 'X'), end=", ")
#   print()

def rotate(array=[], n=0):
    temp = deque(array);
    temp.rotate(n)
    array.clear()
    array.extend(list(temp))
  
class AES:

  KEY = "Thats my Kung Fu"
  PLAIN_TEXT = "Two One Nine Two"

  w = []
  key_matrix = []
  state_matrix = []
  
  def text_to_hex_matrix(self, text):
    val = BitVector(textstring=text)
    hex_value = val.get_bitvector_in_hex();
    array = []

    for i in range(4):
      temp = []
      for j in range(4):
        temp.append(BitVector(hexstring=hex_value[(i*8+j*2):(i*8+j*2+2)]))
      array.append(temp)
    return array

  def g(self, row=[], round_count=0) :
    row_temp = copy.deepcopy(row)
    rotate(row_temp, -1)
    byte_substitute_from_sbox(row_temp)
    
    round_constant = [
      BitVector(intVal=RCon[round_count]),
      BitVector(intVal=0, size=8),
      BitVector(intVal=0, size=8),
      BitVector(intVal=0, size=8)
    ]
    row_temp = array_xor(row_temp, round_constant)
    return row_temp

  def key_expansion(self):
    self.key_matrix = self.text_to_hex_matrix(self.KEY);
    transpose(self.key_matrix)

    # for i in range(10):
    #   transpose(self.key_matrix)
    #   for row in self.key_matrix:
    #     for val in row:
    #       print(str.upper(val.get_bitvector_in_hex())," ", end="")
    #   print()
    #   transpose(self.key_matrix)
    #   self.create_round_key()
    #   print_bv_matrix(self.key_matrix)

  def create_state_matrix(self):
    self.state_matrix = self.text_to_hex_matrix(self.PLAIN_TEXT)
    transpose(self.state_matrix)

  def first_round(self):

    for i in range(4):
      for j in range(4):
        self.state_matrix[i][j] = self.state_matrix[i][j] ^ self.key_matrix[i][j]
    
    

  def substitution_bytes(self, matrix):
    for i in range(4):
      for j in range(4):
        matrix[i][j] = BitVector(intVal=Sbox[self.state_matrix[i][j].intValue()], size=8)
  
  def shift_row(self, matrix):
    for i in range(4):
      rotate(matrix[i], -i)

  def mix_column(self, matrix):
    temp_matrix = copy.deepcopy(matrix)
    for i in range(4):
      for j in range(4):
        sum = BitVector(intVal=0, size=8)
        for k in range(4):
          sum = sum ^ (Mixer[i][k].gf_multiply_modular(temp_matrix[k][j], AES_modulus, 8))
        matrix[i][j] = sum

  def create_round_key(self, round_count):
    w = []
    transpose(self.key_matrix)
    # print_bv_array(self.key_matrix[3])
    temp = array_xor(self.key_matrix[0], self.g(self.key_matrix[3], round_count=round_count))
    w.append(temp);
    for i in range(3):
      temp = array_xor(self.key_matrix[i+1], w[i])
      w.append(temp)
    self.key_matrix = w.copy()
    transpose(self.key_matrix)
  
  def add_round_key(self, matrix, round_count):
    self.create_round_key(round_count)
    for i in range(4):
      for j in range(4):
        matrix[i][j] = matrix[i][j] ^ self.key_matrix[i][j]

  def round(self, round_count):
    # print("--- key matrix ---")
    # print_bv_matrix(self.key_matrix)
    # print("--- key matrix ---")

    self.substitution_bytes(self.state_matrix)
    self.shift_row(self.state_matrix)
    # print("After b s r")
    # print_bv_matrix(self.state_matrix)
    self.mix_column(self.state_matrix)
    # print_bv_matrix(self.state_matrix)
    self.add_round_key(self.state_matrix, round_count)
    # print("after m c r k")
    print_bv_matrix(self.state_matrix)
  
  def last_round(self):
    self.substitution_bytes(self.state_matrix)
    self.shift_row(self.state_matrix)
    self.add_round_key(self.state_matrix, 9)

  def encrypt(self):
    self.create_state_matrix()
    self.key_expansion()
    self.first_round()
    for i in range(9):
      self.round(i)
    self.last_round()
    print("final encrypt matrix")
    print_bv_matrix(self.state_matrix)


aes = AES();
aes.encrypt()


